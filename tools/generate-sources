#!/bin/bash

main() {
  # Start in project root
  cd $(dirname "$0")/..

  # Clear existing generated sources
  rm -rf gen

  # Generate lexer
  tmp=$(mktemp).Lexer.x
  cp eta/compiler/ETA/Parser/Lexer.x "$tmp"
  patch_module_names "$tmp"
  target=gen/Language/Eta/Parser/Lexer.hs
  mkdir -p $(dirname "$target")
  alex -o "$target" "$tmp"

  # Copy/patch modules
  for src in "${sources[@]}"; do
    target="gen/Language/Eta/$src.hs"
    mkdir -p $(dirname "$target")
    cp "eta/compiler/ETA/$src.hs" "$target"
    patch_file="patches/Language/Eta/$src.hs.patch"
    # If we have a patch file, apply it.
    # Otherwise, do our default module name patching.
    if [ -f "$patch_file" ]; then
      patch "$target" "$patch_file"
    else
      patch_module_names "$target"
    fi
  done

  # Copy/patch boot sources
  for src in "${boot_sources[@]}"; do
    target="gen/Language/Eta/$src.hs-boot"
    mkdir -p $(dirname "$target")
    cp "eta/compiler/ETA/$src.hs-boot" "$target"
    patch_module_names "$target"
  done

  # Copy codec-jvm sources
  mkdir -p gen/Codec/JVM/ASM/Code
  for src in $(find eta/codec-jvm/src/Codec -type f | grep '\.hs$'); do
    target="gen/$(cut -d / -f 4- <<< "$src")"
    mkdir -p $(dirname "$target")
    cp "$src" "$target"
  done
}

# Simple patch of module names from ETA to Language.Eta
patch_module_names() {
  sed -i'' "s/ETA/Language.Eta/g" "$1"
}

sources=(
  BasicTypes/Avail
  BasicTypes/BasicTypes
  BasicTypes/ConLike
  BasicTypes/DataCon
  BasicTypes/Demand
  BasicTypes/Id
  BasicTypes/IdInfo
  BasicTypes/Lexeme
  BasicTypes/Literal
  BasicTypes/MkId
  BasicTypes/Module
  BasicTypes/Name
  BasicTypes/NameEnv
  BasicTypes/NameSet
  BasicTypes/OccName
  BasicTypes/PatSyn
  BasicTypes/RdrName
  BasicTypes/SrcLoc
  BasicTypes/UniqSupply
  BasicTypes/Unique
  BasicTypes/Var
  BasicTypes/VarEnv
  BasicTypes/VarSet
  Core/CoreArity
  Core/CoreFVs
  Core/CoreSeq
  Core/CoreSubst
  Core/CoreSyn
  Core/CoreTidy
  Core/CoreUnfold
  Core/CoreUtils
  Core/MkCore
  Core/PprCore
  Core/TrieMap
  HsSyn/HsBinds
  HsSyn/HsDecls
  HsSyn/HsDoc
  HsSyn/HsExpr
  HsSyn/HsImpExp
  HsSyn/HsLit
  HsSyn/HsPat
  HsSyn/HsSyn
  HsSyn/HsTypes
  HsSyn/HsUtils
  HsSyn/PlaceHolder
  Iface/IfaceSyn
  Iface/IfaceType
  Main/Annotations
  Main/BreakArray
  Main/CmdLineParser
  Main/Constants
  Main/DriverPhases
  Main/DynFlags
  Main/ErrUtils
  Main/Hooks
  Main/HscTypes
  Main/PackageConfig
  Main/Packages
  Main/PipelineMonad
  Main/StaticFlags
  Parser/ApiAnnotation
  Parser/Ctype
  Prelude/ForeignCall
  Prelude/PrelNames
  Prelude/PrelRules
  Prelude/PrimOp
  Prelude/TysPrim
  Prelude/TysWiredIn
  Profiling/CostCentre
  SimplCore/OccurAnal
  Specialise/Rules
  TypeCheck/TcEvidence
  TypeCheck/TcRnTypes
  TypeCheck/TcType
  Types/Class
  Types/CoAxiom
  Types/Coercion
  Types/FamInstEnv
  Types/InstEnv
  Types/Kind
  Types/OptCoercion
  Types/TyCon
  Types/Type
  Types/TypeRep
  Types/Unify
  Utils/Bag
  Utils/Binary
  Utils/BooleanFormula
  Utils/BufWrite
  Utils/Digraph
  Utils/Encoding
  Utils/Exception
  Utils/ExtsCompat46
  Utils/FastFunctions
  Utils/FastMutInt
  Utils/FastString
  Utils/FastTypes
  Utils/Fingerprint
  Utils/FiniteMap
  Utils/IOEnv
  Utils/Json
  Utils/ListSetOps
  Utils/Maybes
  Utils/Metrics
  Utils/MonadUtils
  Utils/OrdList
  Utils/Outputable
  Utils/Pair
  Utils/Panic
  Utils/Platform
  Utils/Pretty
  Utils/Serialized
  Utils/StringBuffer
  Utils/UniqDFM
  Utils/UniqDSet
  Utils/UniqFM
  Utils/UniqSet
  Utils/Util
)

boot_sources=(
  BasicTypes/DataCon
  BasicTypes/IdInfo
  BasicTypes/MkId
  BasicTypes/Module
  BasicTypes/Name
  BasicTypes/OccName
  BasicTypes/PatSyn
  HsSyn/HsExpr
  HsSyn/HsPat
  Main/DynFlags
  Main/ErrUtils
  Main/Hooks
  Main/Packages
  Main/StaticFlags
  Prelude/PrelNames
  Prelude/PrimOp
  Prelude/TysWiredIn
  TypeCheck/TcType
  Types/TyCon
  Types/Type
  Types/TypeRep
  Utils/Outputable
)

main
