59c59
< module ETA.Parser.Lexer (
---
> module Language.Eta.Parser.Lexer (
102,107c102,107
< import ETA.Utils.Bag
< import ETA.Utils.Outputable
< import ETA.Utils.StringBuffer
< import ETA.Utils.FastString
< import ETA.Utils.UniqFM
< import ETA.Utils.Util             ( readRational )
---
> import Language.Eta.Utils.Bag
> import Language.Eta.Utils.Outputable
> import Language.Eta.Utils.StringBuffer
> import Language.Eta.Utils.FastString
> import Language.Eta.Utils.UniqFM
> import Language.Eta.Utils.Util             ( readRational )
110,111c110,111
< import ETA.Main.ErrUtils
< import ETA.Main.DynFlags
---
> import Language.Eta.Main.ErrUtils
> import Language.Eta.Main.DynFlags
114,116c114,116
< import ETA.BasicTypes.SrcLoc
< import ETA.BasicTypes.Module
< import ETA.BasicTypes.BasicTypes     ( InlineSpec(..), RuleMatchInfo(..), FractionalLit(..),
---
> import Language.Eta.BasicTypes.SrcLoc
> import Language.Eta.BasicTypes.Module
> import Language.Eta.BasicTypes.BasicTypes     ( InlineSpec(..), RuleMatchInfo(..), FractionalLit(..),
120c120
< import ETA.Parser.Ctype
---
> import Language.Eta.Parser.Ctype
122c122
< import ETA.Parser.ApiAnnotation
---
> import Language.Eta.Parser.ApiAnnotation
374,399c374,400
< <0> {
<   "[|"        / { ifExtension thEnabled } { token ITopenExpQuote }
<   "[||"       / { ifExtension thEnabled } { token ITopenTExpQuote }
<   "[e|"       / { ifExtension thEnabled } { token ITopenExpQuote }
<   "[e||"      / { ifExtension thEnabled } { token ITopenTExpQuote }
<   "[p|"       / { ifExtension thEnabled } { token ITopenPatQuote }
<   "[d|"       / { ifExtension thEnabled } { layout_token ITopenDecQuote }
<   "[t|"       / { ifExtension thEnabled } { token ITopenTypQuote }
<   "|]"        / { ifExtension thEnabled } { token ITcloseQuote }
<   "||]"       / { ifExtension thEnabled } { token ITcloseTExpQuote }
<   \$ @varid   / { ifExtension thEnabled } { skip_one_varid ITidEscape }
<   "$$" @varid / { ifExtension thEnabled } { skip_two_varid ITidTyEscape }
<   "$("        / { ifExtension thEnabled } { token ITparenEscape }
<   "$$("       / { ifExtension thEnabled } { token ITparenTyEscape }
< 
< -- For backward compatibility, accept the old dollar syntax
<   "[$" @varid "|"  / { ifExtension qqEnabled }
<                      { lex_quasiquote_tok }
< 
<   "[" @varid "|"  / { ifExtension qqEnabled }
<                      { lex_quasiquote_tok }
< 
<   -- qualified quasi-quote (#5555)
<   "[" @qvarid "|"  / { ifExtension qqEnabled }
<                      { lex_qquasiquote_tok }
< }
---
> -- TODO: DISABLE TEMPLATE HASKELL
> -- <0> {
> --   "[|"        / { ifExtension thEnabled } { token ITopenExpQuote }
> --   "[||"       / { ifExtension thEnabled } { token ITopenTExpQuote }
> --   "[e|"       / { ifExtension thEnabled } { token ITopenExpQuote }
> --   "[e||"      / { ifExtension thEnabled } { token ITopenTExpQuote }
> --   "[p|"       / { ifExtension thEnabled } { token ITopenPatQuote }
> --   "[d|"       / { ifExtension thEnabled } { layout_token ITopenDecQuote }
> --   "[t|"       / { ifExtension thEnabled } { token ITopenTypQuote }
> --   "|]"        / { ifExtension thEnabled } { token ITcloseQuote }
> --   "||]"       / { ifExtension thEnabled } { token ITcloseTExpQuote }
> --   \$ @varid   / { ifExtension thEnabled } { skip_one_varid ITidEscape }
> --   "$$" @varid / { ifExtension thEnabled } { skip_two_varid ITidTyEscape }
> --   "$("        / { ifExtension thEnabled } { token ITparenEscape }
> --   "$$("       / { ifExtension thEnabled } { token ITparenTyEscape }
> --
> -- -- For backward compatibility, accept the old dollar syntax
> --   "[$" @varid "|"  / { ifExtension qqEnabled }
> --                     { lex_quasiquote_tok }
> --
> --   "[" @varid "|"  / { ifExtension qqEnabled }
> --                     { lex_quasiquote_tok }
> --
> -- -- qualified quasi-quote (#5555)
> --   "[" @qvarid "|"  / { ifExtension qqEnabled }
> --                       { lex_qquasiquote_tok }
> -- }
494,495c495,496
<   -- Unboxed floats and doubles (:: Float#, :: Double#)
<   -- prim_{float,double} work with signed literals
---
> -- Unboxed floats and doubles (:: Float#, :: Double#)
> --  prim_{float,double} work with signed literals
687,688c688,689
<   | ITLarrowtail                --  -<<
<   | ITRarrowtail                --  >>-
---
>   | ITLLarrowtail                --  -<<
>   | ITRRarrowtail                --  >>-
819,820c820,821
<        ,("-<<", ITLarrowtail, arrowsEnabled)
<        ,(">>-", ITRarrowtail, arrowsEnabled)
---
>        ,("-<<", ITLLarrowtail, arrowsEnabled)
>        ,(">>-", ITRRarrowtail, arrowsEnabled)
830,831c831,832
<        ,("⤛",   ITLarrowtail, \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
<        ,("⤜",   ITRarrowtail, \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
---
>        ,("⤛",   ITLLarrowtail, \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
>        ,("⤜",   ITRRarrowtail, \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
