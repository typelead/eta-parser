13c13
< module ETA.Utils.Panic (
---
> module Language.Eta.Utils.Panic (
25c25
<      installSignalHandlers,
---
>      -- installSignalHandlers,
31c31
< import {-# SOURCE #-} ETA.Utils.Outputable (SDoc)
---
> import {-# SOURCE #-} Language.Eta.Utils.Outputable (SDoc)
33,36c33,36
< import ETA.Main.Constants
< import ETA.Utils.FastTypes
< import ETA.Utils.Exception
< import qualified ETA.Utils.Exception as Exception
---
> import Language.Eta.Main.Constants
> import Language.Eta.Utils.FastTypes
> import Language.Eta.Utils.Exception
> import qualified Language.Eta.Utils.Exception as Exception
45,51c45,51
< #ifndef mingw32_HOST_OS
< import System.Posix.Signals
< #endif
< 
< #if defined(mingw32_HOST_OS)
< import GHC.ConsoleHandler
< #endif
---
> -- #ifndef mingw32_HOST_OS
> -- import System.Posix.Signals
> -- #endif
> --
> -- #if defined(mingw32_HOST_OS)
> -- import GHC.ConsoleHandler
> -- #endif
188,192c188,193
< panic    x = unsafeDupablePerformIO $ do
<    stack <- ccsToStrings =<< getCurrentCCS x
<    if null stack
<       then throwGhcException (Panic x)
<       else throwGhcException (Panic (x ++ '\n' : renderStack stack))
---
> panic = undefined
> -- panic    x = unsafeDupablePerformIO $ do
> --    stack <- ccsToStrings =<< getCurrentCCS x
> --    if null stack
> --       then throwGhcException (Panic x)
> --       else throwGhcException (Panic (x ++ '\n' : renderStack stack))
243,283c244,284
< -- | Install standard signal handlers for catching ^C, which just throw an
< --   exception in the target thread.  The current target thread is the
< --   thread at the head of the list in the MVar passed to
< --   installSignalHandlers.
< installSignalHandlers :: IO ()
< installSignalHandlers = do
<   main_thread <- myThreadId
<   pushInterruptTargetThread main_thread
< 
<   let
<       interrupt_exn = (toException UserInterrupt)
< 
<       interrupt = do
<         mt <- peekInterruptTargetThread
<         case mt of
<           Nothing -> return ()
<           Just t  -> throwTo t interrupt_exn
< 
<   --
< #if !defined(mingw32_HOST_OS)
<   _ <- installHandler sigQUIT  (Catch interrupt) Nothing
<   _ <- installHandler sigINT   (Catch interrupt) Nothing
<   -- see #3656; in the future we should install these automatically for
<   -- all Haskell programs in the same way that we install a ^C handler.
<   let fatal_signal n = throwTo main_thread (Signal (fromIntegral n))
<   _ <- installHandler sigHUP   (Catch (fatal_signal sigHUP))  Nothing
<   _ <- installHandler sigTERM  (Catch (fatal_signal sigTERM)) Nothing
<   return ()
< #else
<   -- GHC 6.3+ has support for console events on Windows
<   -- NOTE: running GHCi under a bash shell for some reason requires
<   -- you to press Ctrl-Break rather than Ctrl-C to provoke
<   -- an interrupt.  Ctrl-C is getting blocked somewhere, I don't know
<   -- why --SDM 17/12/2004
<   let sig_handler ControlC = interrupt
<       sig_handler Break    = interrupt
<       sig_handler _        = return ()
< 
<   _ <- installHandler (Catch sig_handler)
<   return ()
< #endif
---
> -- -- | Install standard signal handlers for catching ^C, which just throw an
> -- --   exception in the target thread.  The current target thread is the
> -- --   thread at the head of the list in the MVar passed to
> -- --   installSignalHandlers.
> -- installSignalHandlers :: IO ()
> -- installSignalHandlers = do
> --   main_thread <- myThreadId
> --   pushInterruptTargetThread main_thread
> --
> --   let
> --       interrupt_exn = (toException UserInterrupt)
> --
> --       interrupt = do
> --         mt <- peekInterruptTargetThread
> --         case mt of
> --           Nothing -> return ()
> --           Just t  -> throwTo t interrupt_exn
> --
> --   --
> -- #if !defined(mingw32_HOST_OS)
> --   _ <- installHandler sigQUIT  (Catch interrupt) Nothing
> --   _ <- installHandler sigINT   (Catch interrupt) Nothing
> --   -- see #3656; in the future we should install these automatically for
> --   -- all Haskell programs in the same way that we install a ^C handler.
> --   let fatal_signal n = throwTo main_thread (Signal (fromIntegral n))
> --   _ <- installHandler sigHUP   (Catch (fatal_signal sigHUP))  Nothing
> --   _ <- installHandler sigTERM  (Catch (fatal_signal sigTERM)) Nothing
> --   return ()
> -- #else
> --   -- GHC 6.3+ has support for console events on Windows
> --   -- NOTE: running GHCi under a bash shell for some reason requires
> --   -- you to press Ctrl-Break rather than Ctrl-C to provoke
> --   -- an interrupt.  Ctrl-C is getting blocked somewhere, I don't know
> --   -- why --SDM 17/12/2004
> --   let sig_handler ControlC = interrupt
> --       sig_handler Break    = interrupt
> --       sig_handler _        = return ()
> --
> --   _ <- installHandler (Catch sig_handler)
> --   return ()
> -- #endif
